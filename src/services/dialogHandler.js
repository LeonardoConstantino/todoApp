/**
 * @description Objeto contendo as prioridades dispon√≠veis para as tarefas, com seus respectivos r√≥tulos localizados em portugu√™s.
 * As prioridades dispon√≠veis s√£o: baixa (üîµ), m√©dia (üü†) e alta (üî¥).
 */
const priorities = {
  low: 'Baixa üîµ',
  medium: 'M√©dia üü†',
  high: 'Alta üî¥',
};

/**
 * @description Objeto contendo os textos localizados para o aplicativo, organizados por idioma.
 * Cada idioma possui uma estrutura de objetos aninhados que representam os diferentes contextos e mensagens do aplicativo.
 * Esses textos s√£o utilizados pela fun√ß√£o `getText` para obter os textos localizados.
 */
const texts = {
  'pt-br': {
    app: {
      title: 'üìã Lista de Tarefas',
    },
    notifications: {
      appStarted: 'üöÄ O aplicativo iniciado com sucesso!',
      startError: (message) =>
        `‚ùå Ocorreu um erro ao iniciar o aplicativo. ${message}`,
      themeToggled: (currentTheme) => `üåì Alternar Tema para ${currentTheme}`,
      themeChanged: (newTheme) => `Tema alterado para ${newTheme} üåì`,
      priorityUpdated: (priority) => `üîÑ Prioridade alterada para ${priority}`,
      tasksAdded: '‚úÖ Tarefa(s) adicionada(s) com sucesso!',
      filtersApplied: 'üéØ Filtros aplicados com sucesso!',
      taskStatusChanged: (task) =>
        `Tarefa "${task.title}" ${task.completed ? 'conclu√≠da' : 'pendente'}!`,
      taskNotFound: '‚ö†Ô∏è Tarefa n√£o encontrada!',
      taskDeleted: (deletedTask) =>
        `üóëÔ∏è Tarefa "${deletedTask.title}" exclu√≠da com sucesso!`,
      allTasksDeleted: 'üóëÔ∏è Todas as tarefas exclu√≠das com sucesso!',
      storageUsage: (usage) => `üóÇÔ∏è ~${usage} / ~10 MB`,
      summary: (total, pending, completed) =>
        `Total: ${total} | Pendentes: ${pending} | Conclu√≠das: ${completed} üìä`,
    },
    placeholders: {
      taskInput: 'üìù Digite suas tarefas (uma por linha)',
    },
    priorities: { ...priorities },
    actions: {
      addTasks: '‚ûï Adicionar Tarefas',
      deleteTasks: 'üóëÔ∏è Remover Tarefas',
      toggleTheme: 'üåì Alternar Tema',
      deleteTaskConfirm: (title) => `Excluir tarefa "${title}" üóëÔ∏è`,
      deleteAllTasksConfirm: (count) =>
        `Excluir todas as tarefas (${count}) üîÑüóëÔ∏è`,
    },
    filters: {
      status: {
        all: 'Todos üìã',
        completed: 'Conclu√≠das ‚úÖ',
        pending: 'Pendentes ‚è≥',
      },
      priority: {
        all: 'Todos üìã',
        ...priorities,
      },
    },
    taskDetails: {
      created: (createdAt) => `‚è±Ô∏è Criada: ${createdAt}`,
      completed: (completedAt) => `‚è±Ô∏è Conclu√≠da: ${completedAt}`,
      timeSpent: (time) => `‚è±Ô∏è Tempo: ${time}`,
    },
    labels: {
      taskList: 'üìã Lista de Tarefas',
      delete: 'Excluir üóëÔ∏è',
    },
  },
};

/**
 * @function getText
 * @description Busca um texto localizado com base no idioma e no caminho fornecido.
 * Suporta par√¢metros adicionais para formatar o texto ou executar fun√ß√µes de retorno.
 * @param {string} lang - O c√≥digo de idioma a ser utilizado (ex.: 'pt', 'en').
 * @param {string} path - O caminho para o texto, onde cada n√≠vel √© separado por um ponto (ex.: 'menu.home').
 * @param {...any} args - Argumentos opcionais para formatar o texto ou como par√¢metros para fun√ß√µes.
 * @returns {string} - Retorna o texto localizado ou uma mensagem de erro caso o texto ou idioma n√£o seja encontrado.
 * @throws {Error} - Lan√ßa um erro se o idioma ou o caminho estiverem ausentes, ou se o caminho for inv√°lido.
 */
export const getText = (lang, path, ...args) => {
  try {
    // Valida√ß√µes iniciais
    if (!lang || !path) {
      throw new Error('Idioma e caminho s√£o obrigat√≥rios');
    }

    if (!texts[lang]) {
      return `Idioma "${lang}" n√£o dispon√≠vel`;
    }

    // Obt√©m o texto usando reduce para melhor performance e legibilidade
    const value = path.split('.').reduce((obj, key) => {
      if (typeof obj === 'string' || typeof obj === 'function') {
        throw new Error(`Caminho inv√°lido: "${path}"`);
      }
      if (!obj[key]) {
        throw new Error(`Chave "${key}" n√£o encontrada`);
      }
      return obj[key];
    }, texts[lang]);

    // Processa o valor final
    if (typeof value === 'function') {
      return value(...args);
    }

    if (typeof value === 'string') {
      return value;
    }

    if (typeof value === 'object') {
      return value;
    }

    throw new Error('Valor encontrado n√£o √© um texto ou fun√ß√£o');
  } catch (error) {
    console.warn(`Erro ao obter texto:`, error.message, {
      lang,
      path,
      args,
    });
    return `Texto n√£o encontrado para "${path}" no idioma "${lang}"`;
  }
};
